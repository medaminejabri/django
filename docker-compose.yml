version: '3.8'

services:
  web: &web
    build: .
    volumes:
      - .:/app
    ports:
      - "8000:8000"  # Expose port 8002 for Django app
    env_file:
      - docker-compose.env
    command: >
      sh -c "sleep 5 && python manage.py runserver 0.0.0.0:8000 --noreload"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  celery:
    <<: *web
    command: >
      sh -c "celery -A mydjangoproject worker -B -E --loglevel=info --without-mingle --without-gossip --heartbeat-interval 15"
    env_file:
      - docker-compose.env
    depends_on:
      - rabbitmq
      - web
    ports: []

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5678:5672"    # RabbitMQ default port for messaging
      - "15672:15672"  # RabbitMQ management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      retries: 3
      start_period: 5s
      timeout: 10s

  migration:
    build: .
    command: >
      sh -c "python manage.py migrate --no-input"
    env_file:
      - docker-compose.env
    depends_on:
      - db

  db:
    image: postgres:15
    environment:
      - POSTGRES_PASSWORD=jabri
      - POSTGRES_USER=mohamed
      - POSTGRES_DB=db
    ports:
      - "5433:5432"  # Change the exposed Postgres port to 5433
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mohamed -d db"]
      interval: 10s
      timeout: 5s
      retries: 5

  flower:
    image: mher/flower
    ports:
      - "5555:5555"  # Flower interface for Celery monitoring
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=rpc://
      - FLOWER_BROKER_API=http://rabbitmq:15672/api/
      - FLOWER_ADDRESS=0.0.0.0
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=admin:password
    depends_on:
      - rabbitmq
    restart: on-failure
