version: '3.8'

services:
  web: &web
    build: .
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - docker-compose.env
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"

  celery:
    <<: *web
    command: >
      sh -c "celery -A mydjangoproject worker --loglevel=info"
    env_file:
      - docker-compose.env
    depends_on:
      - rabbitmq
      - web
    ports: []

  leek:
    image: kodhive/leek:0.6.9 # Assurez-vous que l'image Leek existe
    ports:
      - "5000:5000"
      - "8081:8081" # Port pour accéder à l'interface de Leek
    environment:
      # General
      - LEEK_API_LOG_LEVEL=INFO
      - LEEK_AGENT_LOG_LEVEL=INFO
      # Components
      - LEEK_ENABLE_API=true
      - LEEK_ENABLE_AGENT=true
      - LEEK_ENABLE_WEB=true
      # URLs
      - LEEK_API_URL=http://0.0.0.0:5000
      - LEEK_WEB_URL=http://0.0.0.0:8081
      # Authentication
      - LEEK_API_ENABLE_AUTH=false
      # Subscriptions
      - |
        LEEK_AGENT_SUBSCRIPTIONS=
        [
          {
            "broker": "amqp://guest:guest@rabbitmq:5672//",
            "backend": null,
            "exchange": "celeryev",
            "queue": "leek.fanout",
            "routing_key": "#",
            "org_name": "mono",
            "app_name": "leek",
            "app_env": "prod",
            "prefetch_count": 1000,
            "concurrency_pool_size": 2
          }
        ]
      - LEEK_AGENT_API_SECRET=not-secret
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5677:5672"    # RabbitMQ default port
      - "15672:15672"  # RabbitMQ management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  migration:
    build: .
    command: >
      sh -c "python manage.py migrate --no-input"
    env_file:
      - docker-compose.env
    depends_on:
      - db

  db:
    image: postgres:15
    tmpfs:
      - /var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=jabri
      - POSTGRES_USER=mohamed
      - POSTGRES_DB=db2
    ports:
      - "5444:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mohamed -d db2"]
      interval: 10s
      timeout: 5s
      retries: 5
